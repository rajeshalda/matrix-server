((p,l)=>{XF.Stats=XF.Element.newHandler({options:{data:"| .js-statsData",seriesLabels:"| .js-statsSeriesLabels",legend:"| .js-statsLegend",chart:"| .js-statsChart",maxTicks:9,lineSmooth:!1,showArea:!1,showPoint:!0,averages:!0},chartEl:null,chart:null,seriesLabels:{},labelMap:{},tooltipEl:null,init(){this.chartEl=XF.findRelativeIf(this.options.chart,this.target);var b={},a=XF.findRelativeIf(this.options.data,this.target),d={};const c=XF.findRelativeIf(this.options.seriesLabels,this.target);try{b=JSON.parse(a.innerHTML)||
{}}catch(f){console.error("Stats data not valid: ",f);return}try{d=JSON.parse(c.innerHTML)||{}}catch(f){console.error("Series labels not valid: ",f)}this.seriesLabels=d;b=this.setupChartData(b);a=this.setupChartOptions(b);d=this.setupChartResponsive(b,a);this.createChart(b,a,d)},setupChartData(b){const a=[],d={};let c=null,f=0;Object.entries(b).forEach(([,g])=>{let h=0;var e=this.options.averages?"averages":"values";const m=`${e}.tips`;e=g[e];a.push(f);d[f]=g.label;if(null===c){c=[];for(var k of Object.keys(e))c.push({name:this.seriesLabels[k],
data:[]})}for(const n of Object.keys(e))k={x:f,y:e[n]},XF.hasOwn(g,m)&&(k.tip=g[m][n]),c[h].data.push(k),h++;f++});this.labelMap=d;return{labels:a,series:c}},setupChartOptions(b){const a=b.labels;return{fullWidth:!0,lineSmooth:this.options.lineSmooth,showArea:this.options.showArea,showPoint:this.options.showPoint,axisY:{onlyInteger:!0,labelOffset:{x:0,y:6}},axisX:{type:Chartist.FixedScaleAxis,ticks:this.getTicks(a,this.options.maxTicks),low:a[0],high:a.length?a[a.length-1]:0,labelOffset:{x:0,y:4},
labelInterpolationFnc:d=>d>=a[a.length-1]?"\u00a0":this.labelMap[d]}}},getTicks(b,a){const d=[];a=Math.ceil(b.length/a);for(let c=0;c<b.length;c++)0==c%a&&d.push(b[c]);return d},setupChartResponsive(b,a){return[["screen and (max-width: 800px)",{axisX:{ticks:this.getTicks(b.labels,Math.min(6,this.options.maxTicks))}}],["screen and (max-width: 500px)",{axisX:{ticks:this.getTicks(b.labels,Math.min(3,this.options.maxTicks))}}]]},createChart(b,a,d){this.chart=new Chartist.Line(this.chartEl,b,a,d);this.tooltipEl=
new XF.TooltipElement(l.createElement("span"),{html:!0});XF.onDelegated(this.chartEl,"mouseover",".ct-point",this.showTooltip.bind(this,b));XF.onDelegated(this.chartEl,"focusin",".ct-point",this.showTooltip.bind(this,b));XF.onDelegated(this.chartEl,"mouseout",".ct-point",this.hideTooltip.bind(this));XF.onDelegated(this.chartEl,"focusout",".ct-point",this.hideTooltip.bind(this));const c=XF.findRelativeIf(this.options.legend,this.target),f=this.chartEl,g=this.chart;c&&setTimeout(()=>{g.data.series.forEach((h,
e)=>{e=h.className||`${g.options.classNames.series}-${Chartist.alphaNumerate(e)}`;if(e=f.querySelector(`.${e}`).querySelector(".ct-line, .ct-point"))h=XF.createElement("li",{textContent:h.name}),e=p.getComputedStyle(e).getPropertyValue("stroke"),e=XF.createElement("i",{style:{background:e}}),h.prepend(e),c.append(h)})},0)},showTooltip(b,a){a=a.target;const d=a.closest(".ct-series"),c=Array.from(l.querySelectorAll(".ct-series")).indexOf(d);var f=a.getAttribute("ct:value").split(",");const g=f[0];f=
f[1]||0;b.series[c]&&b.series[c].data[g]&&XF.hasOwn(b.series[c].data[g],"tip")?this.tooltipEl.content.innerHTML=b.series[c].data[g].tip:this.tooltipEl.content.textContent=`${d.getAttribute("ct:series-name")||""} - ${this.labelMap[g]}: ${f}`;this.tooltipEl.setPositioner(a);this.tooltipEl.show()},hideTooltip(b){this.tooltipEl.hide()}});XF.Element.register("stats","XF.Stats")})(window,document);
